Found repeated words
Found their distances
Found the common factors in the distances: 2 3
Those numbers multiplited is 6, so suspect keylength is 6 characters.

Output:

pos=  0       'VJFITRZJHIHB' pos=378       'VJFITRZJHIHB' dist=378
pos=  0        'VJFITRZJHIH' pos=378        'VJFITRZJHIH' dist=378
pos=  0         'VJFITRZJHI' pos=378         'VJFITRZJHI' dist=378
pos=  2         'FITRZJHIHB' pos=380         'FITRZJHIHB' dist=378
pos=  0          'VJFITRZJH' pos=378          'VJFITRZJH' dist=378
pos=  0          'VJFITRZJH' pos=378          'VJFITRZJH' dist=378
pos=  0           'VJFITRZJ' pos=378           'VJFITRZJ' dist=378
pos=  0            'VJFITRZ' pos=378            'VJFITRZ' dist=378
pos=  0            'VJFITRZ' pos=378            'VJFITRZ' dist=378
pos=  0             'VJFITR' pos=378             'VJFITR' dist=378
pos=  6             'ZJHIHB' pos=384             'ZJHIHB' dist=378
pos=  0             'VJFITR' pos=378             'VJFITR' dist=378
pos=  6             'ZJHIHB' pos=384             'ZJHIHB' dist=378
pos=  0              'VJFIT' pos=378              'VJFIT' dist=378
pos=  5              'RZJHI' pos=383              'RZJHI' dist=378
pos=260              'VFPXM' pos=302              'VFPXM' dist=42
pos=  2              'FITRZ' pos=380              'FITRZ' dist=378
pos=  7              'JHIHB' pos=385              'JHIHB' dist=378
pos=  0               'VJFI' pos=378               'VJFI' dist=378
pos=  4               'TRZJ' pos=382               'TRZJ' dist=378
pos=  8               'HIHB' pos=386               'HIHB' dist=378
pos=192               'MHVL' pos=342               'MHVL' dist=150
pos=260               'VFPX' pos=302               'VFPX' dist=42
pos=282               'UDLM' pos=348               'UDLM' dist=66
pos=  2               'FITR' pos=380               'FITR' dist=378
pos=  6               'ZJHI' pos=384               'ZJHI' dist=378
Distances: 378 66 42 150
Common factors: 2 3
Perhaps the keylength is 6
Ciphertext in 6 columns
VJFITR
ZJHIHB
VSUUEV
MJVGGR
KOLTKF
KQWMOJ
KSWAIF
... 64 more

Took every 6 characters from ciphertext, printed above each other.
Each vertical column should be encoded using same substitution alphabet.

Took frequency counts for each column. Had 6 tables if substitutions. From this
point on, I just did it by trial and error.

The variable "monos" holds the six monoalphabetic ciphertexts. I started by
assigning the value "e" for the top letter in each.

>>> show_freqs(monos[0])
   0.12 M  -  0.12 E
   0.10 L  -  0.09 T
   0.09 H  -  0.08 A
   0.07 X  -  0.08 O
   0.07 V  -  0.07 I
   0.07 K  -  0.07 N
   0.07 B  -  0.06 S
   0.06 U  -  0.06 R
   0.04 Z  -  0.06 H
   0.04 Y  -  0.04 D
   0.04 T  -  0.04 L
   0.04 E  -  0.03 U
   0.03 P  -  0.03 C
   0.03 G  -  0.03 M
   0.03 A  -  0.02 F
   0.01 W  -  0.02 Y
   0.01 R  -  0.02 W
   0.01 Q  -  0.02 G
   0.01 N  -  0.02 P
   0.01 J  -  0.01 B
   0.01 I  -  0.01 V
>>> tables[0]["M"] = "e"

... and so on.

Went through all frequency tables, setting "e" and "t" but only for the most
obvious candidate (i.e., not for those whose two/three most frequent have the
same relative frequencies).

After a while:

>>> reb()
VJFITR ZJHIHB VSUUEV MJVGGR KOLTKF KQWMOJ KSWAIF LLYXNJ MZPLMH TKBKEG BFAAEW BELTNG
.....e ...... ...... e....e ...... ...... ...e.. te.... e....t ...... ...e.. ......
KWZHUU VWZBTZ HMSWRH JMPKEW HJLVOY XJAAES ESPGTH QLAAEU XKBETR YKAKOQ ZUYRPW HYYTPK
.t.t.. .t.... .....t ...... ...... ...e.. .....t .e.e.. .....e ...... ...... ......
RAZVIS AWYMEA MLOTTL LNLKYG BXMBCX ELAHDH VAWAEU PAAAOX MHVLSH LKPHNR YLOXAS IJVIRL
...... .t.... ee.... t..... ...... .e.t.t ...e.. ...e.. e....t t..t.e .e.... ......
TLLWEF HVPGGW HGSAOZ WAMYIF NDAZIY XFHELR YLVWAB LUVFPX MAUZPR PWYTNG TNHBLD UDLMIP
.e.... ...... ...e.. ...... ...... .....e .e.... t..... e....e .t.... ...... ......
XWCXND UASEIR GUVFPX MWYLDR BFNTBL EDPHNF AWJDSD LWJHNG BLPLNR MHVLSL UDLMOG XUPIHH
.t.... .....e ...... et...e ...... ...t.. .t.... tt.t.. .e...e e..... ...... .....t
KLOXRH LMSMOI LLYHNJ VJFITR ZJHIHB UWMHRH MZLXNG HXAAEX GACXRV X
.e...t t..... te.t.. .....e ...... .t.t.t e..... ...e.. ......
>>> tables
[{'M': 'e', 'L': 't'}, {'L': 'e', 'W': 't'}, {}, {'A': 'e', 'H': 't'}, {}, {'H': 't', 'R': 'e'}]

Candidates for the word "THE" might be LKPHNR
                                       t..t.e

That would be table 4, set N=h

Got to here:

VJFITR ZJHIHB VSUUEV MJVGGR KOLTKF KQWMOJ KSWAIF LLYXNJ MZPLMH TKBKEG BFAAEW BELTNG
.a...e .a.... ...... ea...e ...... ...... ...e.. te..h. e....t ...... ...e.. ....h.
KWZHUU VWZBTZ HMSWRH JMPKEW HJLVOY XJAAES ESPGTH QLAAEU XKBETR YKAKOQ ZUYRPW HYYTPK
.t.t.. .t.... a....t ...... aa.... .a.e.. .....t .e.e.. .....e ...... ...... a.....
RAZVIS AWYMEA MLOTTL LNLKYG BXMBCX ELAHDH VAWAEU PAAAOX MHVLSH LKPHNR YLOXAS IJVIRL
.o.... .t.... ee.... t..... ...... .e.t.t .o.e.. .o.e.. e....t t..the .e.... .a....
TLLWEF HVPGGW HGSAOZ WAMYIF NDAZIY XFHELR YLVWAB LUVFPX MAUZPR PWYTNG TNHBLD UDLMIP
.e.... a..... a..e.. .o.... ...... .....e .e.... t..... eo...e .t..h. ...... ......
XWCXND UASEIR GUVFPX MWYLDR BFNTBL EDPHNF AWJDSD LWJHNG BLPLNR MHVLSL UDLMOG XUPIHH
.t..h. .o...e ...... et...e ...... ...th. .t.... tt.th. .e..he e..... ...... .....t
KLOXRH LMSMOI LLYHNJ VJFITR ZJHIHB UWMHRH MZLXNG HXAAEX GACXRV X
.e...t t..... te.th. .a...e .a.... .t.t.t e...h. a..e.. .o....
>>> tables
[{'H': 'a', 'M': 'e', 'L': 't'}, {'A': 'o', 'J': 'a', 'L': 'e', 'W': 't'}, {}, {'A': 'e', 'H': 't'}, {'N': 'h'}, {'H': 't', 'R': 'e'}]

I checked the English digrams and TH is the most common, and HE is the second.
We've got a few HE digrams here. But for the rest, I'll just add TH as in THE
or HE and see where it leads.

Freqs for table 0:

>>> show_freqs(monos[0])
   0.1159 M  -  0.1202 E
   0.1014 L  -  0.0910 T
   0.0870 H  -  0.0812 A
   0.0725 X  -  0.0768 O
   0.0725 V  -  0.0731 I
   0.0725 K  -  0.0695 N
   0.0725 B  -  0.0628 S
   0.0580 U  -  0.0602 R
   0.0435 Z  -  0.0592 H
   0.0435 Y  -  0.0432 D
   0.0435 T  -  0.0398 L
   0.0435 E  -  0.0288 U
   0.0290 P  -  0.0271 C
   0.0290 G  -  0.0261 M
   0.0290 A  -  0.0230 F
   0.0145 W  -  0.0211 Y
   0.0145 R  -  0.0209 W
   0.0145 Q  -  0.0203 G
   0.0145 N  -  0.0182 P
   0.0145 J  -  0.0149 B
   0.0145 I  -  0.0111 V

The three 0.0725 can be used to compose words like "IN" or "ON". Let's insert
"?" for those to see where they are, then we'll try some things.

For the 10th time, start over again. Will be using the shifting technique
instead, as described on wikipedia.

Basically, what I've done is sort by decreasing frequency, and then try to
match up. Another way is to list by alphabetical order..

cipher   english
A 0.01   A 0.09
B ...    ..
C ...

Then SHIFT the cipher side until the frequencies line up.

OK, this approach looks interesting. I've made it visual, so it's easy to see
when the small and large relative frequency values line up. I have a shift()
function that can shift the alphabet. Since the Vigenere cipher rows/columns
are in alphabetical order, and shifted by a specific amount, this should make
it possible to reconstruct the message itself.

>>> sf(0)
                   Text - English
      ****  0.0435 A  -  0.0812 A *******
     *****  0.0580 B  -  0.0149 B *
    ******  0.0725 C  -  0.0271 C **
         *  0.0145 D  -  0.0432 D ****
    ******  0.0725 E  -  0.1202 E **********
      ****  0.0435 F  -  0.0230 F **
      ****  0.0435 G  -  0.0203 G **
       ***  0.0290 H  -  0.0592 H *****
    ******  0.0725 I  -  0.0731 I ******
            0.0000 J  -  0.0010 J
            0.0000 K  -  0.0069 K *
      ****  0.0435 L  -  0.0398 L ***
            0.0000 M  -  0.0261 M **
       ***  0.0290 N  -  0.0695 N ******
  ********  0.0870 O  -  0.0768 O ******
         *  0.0145 P  -  0.0182 P **
         *  0.0145 Q  -  0.0011 Q
    ******  0.0725 R  -  0.0602 R *****
 *********  0.1014 S  -  0.0628 S *****
**********  0.1159 T  -  0.0910 T ********
         *  0.0145 U  -  0.0288 U **
            0.0000 V  -  0.0111 V *
       ***  0.0290 W  -  0.0209 W **
         *  0.0145 X  -  0.0017 X
         *  0.0145 Y  -  0.0211 Y **
>>> recombine(monos)
'CJFITRGJHIHBCSUUEVTJVGGRROLTKFRQWMOJRSWAIFSLYXNJTZPLMHAKBKEGIFAAEWIELTNGRWZHUU
CWZBTZOMSWRHQMPKEWOJLVOYEJAAESLSPGTHXLAAEUEKBETRFKAKOQGUYRPWOYYTPKYAZVISHWYMEAT
LOTTLSNLKYGIXMBCXLLAHDHCAWAEUWAAAOXTHVLSHSKPHNRFLOXASPJVIRLALLWEFOVPGGWOGSAOZDA
MYIFUDAZIYEFHELRFLVWABSUVFPXTAUZPRWWYTNGANHBLDBDLMIPEWCXNDBASEIRNUVFPXTWYLDRIFN
TBLLDPHNFHWJDSDSWJHNGILPLNRTHVLSLBDLMOGEUPIHHRLOXRHSMSMOISLYHNJCJFITRGJHIHBBWMH
RHTZLXNGOXAAEXNACXRV'
>>>

This is the result of shifting monos by 7 places positive. Have not done the
other ones yes.

Tried some more, got this:

>>> recombine(monos)
CCYPTA GCAPHK CLNBEE TCONGA RHEAKO RJPTOS RLPHIO SERENS TSISMQ ADUREP IYTHEF
IXEANP RPSOUD CPSITI OFLDRQ QFIREF OCECOH ECTHEB LLINTQ XETHED EDULTA FDTROZ
GNRYPF ORRAPT YTSCIB HPRTEJ TEHATU SGERYP IQFICG LETODQ CTPHED WTTHOG TAOSSQ
SDIONA FEHEAB PCOPRU AEEDEO OOINGF OZLHOI DTFFIO UWTGIH EYALLA FEODAK SNOMPG
TTNGPA WPRANP AGAILM BWETIY EPVENM BTLLIA NNOMPG TPRSDA IYGABU LWIONO HPCKSM
SPCONP IEISNA TAOSSU BWETOP ENIPHQ REHERQ SFLTOR SERONS CCYPTA GCAPHK BPFORQ
TSEENP OQTHEG NTVERE

This doesn't look like anything to me. Can't see any words that make sense
here... Although there are indeed some instances of the trigram THE

CCYPTA GCAPHK CLNBEE TCONGA RHEAKO RJPTOS RLPHIO SERENS TSISMQ ADUREP IYTHEF
                                                                        ^^^
IXEANP RPSOUD CPSITI OFLDRQ QFIREF OCECOH ECTHEB LLINTQ XETHED EDULTA FDTROZ
                                            ^^^           ^^^
GNRYPF ORRAPT YTSCIB HPRTEJ TEHATU SGERYP IQFICG LETODQ CTPHED WTTHOG TAOSSQ
SDIONA FEHEAB PCOPRU AEEDEO OOINGF OZLHOI DTFFIO UWTGIH EYALLA FEODAK SNOMPG
TTNGPA WPRANP AGAILM BWETIY EPVENM BTLLIA NNOMPG TPRSDA IYGABU LWIONO HPCKSM
SPCONP IEISNA TAOSSU BWETOP ENIPHQ REHERQ SFLTOR SERONS CCYPTA GCAPHK BPFORQ
TSEENP OQTHEG NTVERE
         ^^^

Perhaps some of them are "THERE", "THEM"? I can try to make the according
shifts and check the frequency tables.

Take the last one, THEG.. so if we shift from G to R, what happens?

                   Text - English
       ***  0.0435 A  -  0.0812 A *******
            0.0000 B  -  0.0149 B *
     *****  0.0725 C  -  0.0271 C **
   *******  0.1014 D  -  0.0432 D ****
  ********  0.1159 E  -  0.1202 E **********
         *  0.0145 F  -  0.0230 F **
       ***  0.0435 G  -  0.0203 G **
         *  0.0145 H  -  0.0592 H *****
      ****  0.0580 I  -  0.0731 I ******
            0.0000 J  -  0.0010 J
            0.0000 K  -  0.0069 K *
            0.0000 L  -  0.0398 L ***
         *  0.0145 M  -  0.0261 M **
         *  0.0145 N  -  0.0695 N ******
**********  0.1449 O  -  0.0768 O ******
       ***  0.0435 P  -  0.0182 P **
            0.0000 Q  -  0.0011 Q
       ***  0.0435 R  -  0.0602 R *****
        **  0.0290 S  -  0.0628 S *****
      ****  0.0580 T  -  0.0910 T ********
     *****  0.0725 U  -  0.0288 U **
        **  0.0290 V  -  0.0111 V *
        **  0.0290 W  -  0.0209 W **
         *  0.0145 X  -  0.0017 X
       ***  0.0435 Y  -  0.0211 Y **
>>> recombine(monos)
CCYPTOGCAPHYCLNBESTCONGORHEAKCRJPTOGRLPHICSERENGTSISMEADUREDIYTHE
TIXEANDRPSOURCPSITWOFLDREQFIRETOCECOVECTHEPLLINTEXETHEREDULTOFDTR
ONGNRYPTORRAPHYTSCIPHPRTEXTEHATISGERYDIQFICULETODECTPHERWTTHOUTAO
SSESDIONOFEHEAPPCOPRIAEEDECOOINGTOZLHOWDTFFICUWTGIVEYALLOFEODAYSN
OMPUTTNGPOWPRANDAGAILABWETIMEPVENABTLLIONNOMPUTPRSDOIYGABILWIONCH
PCKSASPCONDIEISNOTAOSSIBWETODENIPHEREHERESFLTOFSERONGCCYPTOGCAPHY
BPFORETSEENDOQTHEUNTVERS

"CCYPTO GCAPHY" <- if the second letter had been an R, this would say
"Cryptography"! Let's try that.

>>> show_freqs(shift(monos[1], ord('R')-ord('G')))
                   Text - English
 *********  0.1304 A  -  0.0812 A *******
        **  0.0290 B  -  0.0149 B *
         *  0.0145 C  -  0.0271 C **
        **  0.0290 D  -  0.0432 D ****
   *******  0.1014 E  -  0.1202 E **********
            0.0000 F  -  0.0230 F **
            0.0000 G  -  0.0203 G **
      ****  0.0580 H  -  0.0592 H *****
         *  0.0145 I  -  0.0731 I ******
       ***  0.0435 J  -  0.0010 J
         *  0.0145 K  -  0.0069 K *
        **  0.0290 L  -  0.0398 L ***
            0.0000 M  -  0.0261 M **
  ********  0.1159 N  -  0.0695 N ******
      ****  0.0580 O  -  0.0768 O ******
**********  0.1449 P  -  0.0182 P **
       ***  0.0435 Q  -  0.0011 Q
        **  0.0290 R  -  0.0602 R *****
         *  0.0145 S  -  0.0628 S *****
            0.0000 T  -  0.0910 T ********
         *  0.0145 U  -  0.0288 U **
            0.0000 V  -  0.0111 V *
       ***  0.0435 W  -  0.0209 W **
            0.0000 X  -  0.0017 X
      ****  0.0580 Y  -  0.0211 Y **
         *  0.0145 Z  -  0.0007 Z

The match isn't too good, but I think it makes sense to not match too much every
peak, but rather look at the general patterns. Let's try recombining back:

>>> monos[1] = shift(monos[1], 4)
>>> recombine(monos)
CRYPTOGRAPHYCANBESTRONGORWEAKCRYPTOGRAPHICSTRENGTHISMEASUREDINTHETIME
ANDRESOURCESITWOULDREQUIRETORECOVERTHEPLAINTEXTTHERESULTOFSTRONGCRYPT
OGRAPHYISCIPHERTEXTTHATISVERYDIFFICULTTODECIPHERWITHOUTPOSSESSIONOFTH
EAPPROPRIATEDECODINGTOOLHOWDIFFICULTGIVENALLOFTODAYSCOMPUTINGPOWERAND
AVAILABLETIMEEVENABILLIONCOMPUTERSDOINGABILLIONCHECKSASECONDITISNOTPO
SSIBLETODECIPHERTHERESULTOFSTRONGCRYPTOGRAPHYBEFORETHEENDOFTHEUNIVERS

Woho! So it seems the text is:

CRYPTOGRAPHY CAN BE STRONG OR WEAK CRYPTOGRAPHIC STRENGTH IS MEASURED
IN THE TIME AND RESOURCES IT WOULD REQUIRE TO RECOVER THE PLAINTEXT
THE RESULT OF STRONG CRYPTOGRAPHY IS CIPHERTEXT THAT IS VERY DIFFICULT
TO DECIPHER WITHOUT POSSESSION OF THE APPROPRIATE DECODING TOOL HOW
DIFFICULT GIVEN ALL OF TODAYS COMPUTING POWER AND AVAILABLE TIME
EVEN A BILLION COMPUTERS DOING A BILLION CHECKS A SECOND IT IS NOT
POSSIBLE TO DECIPHER THE RESULT OF STRONG CRYPTOGRAPHY BEFORE THE
END OF THE UNIVERSE

Is there an "E" missing? That's just the recombination code, I believe.

Now that we have the ciphertext, I believe we should be able to recover the key
as well.

>>> plaintext = recombine(monos)
>>> vigenere_decrypt(ciphertext, plaintext)
'TSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADTSHTADV'
>>> vigenere_decrypt(ciphertext, plaintext)[:cfactor]
'TSHTAD'

Since the cfactor is the key length, we have then used the ciphertext and
plaintext to recover a very weird-looking key. Would have thought the key would
be something readable. I know we can shift the key up/down 13 places, or?

This gives the complete text with the trail:

>>> vigenere_decrypt(ciphertext, "TSHTAD")
CRYPTOGRAPHYCANBESTRONGORWEAKCRYPTOGRAPHICSTRENGTHISM
EASUREDINTHETIMEANDRESOURCESITWOULDREQUIRETORECOVERTHE
PLAINTEXTTHERESULTOFSTRONGCRYPTOGRAPHYISCIPHERTEXTTHAT
ISVERYDIFFICULTTODECIPHERWITHOUTPOSSESSIONOFTHEAPPROPR
IATEDECODINGTOOLHOWDIFFICULTGIVENALLOFTODAYSCOMPUTINGP
OWERANDAVAILABLETIMEEVENABILLIONCOMPUTERSDOINGABILLION
CHECKSASECONDITISNOTPOSSIBLETODECIPHERTHERESULTOFSTRON
GCRYPTOGRAPHYBEFORETHEENDOFTHEUNIVERSE


